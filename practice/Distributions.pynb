{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNzCIKG0xlNNBFmSJD/nija"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"Gs4gQ9GCxoWa","executionInfo":{"status":"ok","timestamp":1732160508710,"user_tz":-330,"elapsed":2935,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"id":"ej8vPTxMxYLG","executionInfo":{"status":"ok","timestamp":1732160594634,"user_tz":-330,"elapsed":473,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}}},"outputs":[],"source":["data=sns.load_dataset('tips')"]},{"cell_type":"code","source":["sns.kdeplot(data['total_bill'],color='green',fill=True)#kernel density estimate(kde)\n","plt.show()\n","\n","print('Mean:',round(data['total_bill'].mean(),2))\n","print('Median:',round(data['total_bill'].median(),2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":485},"id":"jXGXV6IczuJP","executionInfo":{"status":"ok","timestamp":1732160748846,"user_tz":-330,"elapsed":601,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"9c457fdb-4dd6-4cef-cf76-887ed346f70e"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Mean: 19.79\n","Median: 17.8\n"]}]},{"cell_type":"code","source":["sns.displot(data['total_bill'],kind='hist')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"cVyE_MDS0VDd","executionInfo":{"status":"ok","timestamp":1732160827000,"user_tz":-330,"elapsed":503,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"7f4ab56c-23d6-41c6-d9f4-f3be298b42f4"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#kde along with bins\n","##Dont use this function - deprecated function\n","sns.displot(data['total_bill'])\n","plt.show()\n","# not used because the value of each bin cannot be determined because it only shows density on y-axis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"zJ69PQve1IqT","executionInfo":{"status":"ok","timestamp":1732161390025,"user_tz":-330,"elapsed":521,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"facdfe2a-e32c-46f4-996d-19a89c654ade"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.__version__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"fiOwnT222gk2","executionInfo":{"status":"ok","timestamp":1732161357417,"user_tz":-330,"elapsed":496,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"38f5a534-2b47-4776-f575-69953dd7019e"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'0.13.2'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# boxplot and distribution curve\n","sns.boxplot(data['total_bill'],orient='h')\n","plt.show()\n","sns.kdeplot(data['total_bill'],color='blue')\n","plt.yticks([])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":883},"id":"O74JQ0zx2qHF","executionInfo":{"status":"ok","timestamp":1732162323695,"user_tz":-330,"elapsed":598,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"9dcfdd40-0d7a-49dd-e2d7-1f4a685b7726"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#data import\n","penguin_data=sns.load_dataset('penguins')\n","penguin_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"KJErnG8S4b3D","executionInfo":{"status":"ok","timestamp":1732162553934,"user_tz":-330,"elapsed":533,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"d510dbbe-ee36-4f73-e69a-2975bd704a36"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n","0  Adelie  Torgersen            39.1           18.7              181.0   \n","1  Adelie  Torgersen            39.5           17.4              186.0   \n","2  Adelie  Torgersen            40.3           18.0              195.0   \n","3  Adelie  Torgersen             NaN            NaN                NaN   \n","4  Adelie  Torgersen            36.7           19.3              193.0   \n","\n","   body_mass_g     sex  \n","0       3750.0    Male  \n","1       3800.0  Female  \n","2       3250.0  Female  \n","3          NaN     NaN  \n","4       3450.0  Female  "],"text/html":["\n","  <div id=\"df-c4cc8fed-a3d3-4a76-874b-038de0303a91\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>species</th>\n","      <th>island</th>\n","      <th>bill_length_mm</th>\n","      <th>bill_depth_mm</th>\n","      <th>flipper_length_mm</th>\n","      <th>body_mass_g</th>\n","      <th>sex</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Adelie</td>\n","      <td>Torgersen</td>\n","      <td>39.1</td>\n","      <td>18.7</td>\n","      <td>181.0</td>\n","      <td>3750.0</td>\n","      <td>Male</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Adelie</td>\n","      <td>Torgersen</td>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>186.0</td>\n","      <td>3800.0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Adelie</td>\n","      <td>Torgersen</td>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>195.0</td>\n","      <td>3250.0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Adelie</td>\n","      <td>Torgersen</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Adelie</td>\n","      <td>Torgersen</td>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>193.0</td>\n","      <td>3450.0</td>\n","      <td>Female</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4cc8fed-a3d3-4a76-874b-038de0303a91')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c4cc8fed-a3d3-4a76-874b-038de0303a91 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c4cc8fed-a3d3-4a76-874b-038de0303a91');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-058a55b7-644c-48c2-ab33-44f5c53fa4a0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-058a55b7-644c-48c2-ab33-44f5c53fa4a0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-058a55b7-644c-48c2-ab33-44f5c53fa4a0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"penguin_data","summary":"{\n  \"name\": \"penguin_data\",\n  \"rows\": 344,\n  \"fields\": [\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Adelie\",\n          \"Chinstrap\",\n          \"Gentoo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"island\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Torgersen\",\n          \"Biscoe\",\n          \"Dream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.459583713926532,\n        \"min\": 32.1,\n        \"max\": 59.6,\n        \"num_unique_values\": 164,\n        \"samples\": [\n          48.2,\n          49.8,\n          45.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_depth_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9747931568167816,\n        \"min\": 13.1,\n        \"max\": 21.5,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          16.9,\n          18.7,\n          18.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flipper_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.061713679356894,\n        \"min\": 172.0,\n        \"max\": 231.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          201.0,\n          180.0,\n          212.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body_mass_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 801.9545356980954,\n        \"min\": 2700.0,\n        \"max\": 6300.0,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          4350.0,\n          4150.0,\n          3525.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# count of null values\n","penguin_data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"GaZIdW3G7wKK","executionInfo":{"status":"ok","timestamp":1732162582115,"user_tz":-330,"elapsed":496,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"abf32aea-c005-44c7-f3d4-9baaa6611cba"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["species               0\n","island                0\n","bill_length_mm        2\n","bill_depth_mm         2\n","flipper_length_mm     2\n","body_mass_g           2\n","sex                  11\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>species</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>island</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bill_length_mm</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>bill_depth_mm</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>flipper_length_mm</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>body_mass_g</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# drop the null values\n","penguin_data.dropna(inplace=True)\n","# null value check\n","penguin_data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"5rR62CdN73Ga","executionInfo":{"status":"ok","timestamp":1732162673145,"user_tz":-330,"elapsed":487,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"a0fdb734-bff2-454d-b510-c97f1acbe21c"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["species              0\n","island               0\n","bill_length_mm       0\n","bill_depth_mm        0\n","flipper_length_mm    0\n","body_mass_g          0\n","sex                  0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>species</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>island</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bill_length_mm</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bill_depth_mm</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>flipper_length_mm</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>body_mass_g</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# distribution graph for penguin data\n","for cols in penguin_data.columns:\n","  if penguin_data[cols].dtype=='O':\n","    sns.kdeplot(penguin_data[cols],fill=True)\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":809},"id":"tts3KpS_76E9","executionInfo":{"status":"error","timestamp":1732162788863,"user_tz":-330,"elapsed":505,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"ad17e6b8-407a-40c0-f384-b347fd08c7e7"},"execution_count":32,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"The x variable is categorical, but one of ['numeric', 'datetime'] is required","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-58b2308832e2>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcols\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpenguin_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mpenguin_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'O'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkdeplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpenguin_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mkdeplot\u001b[0;34m(data, x, y, hue, weights, palette, hue_order, hue_norm, color, fill, multiple, common_norm, common_grid, cumulative, bw_method, bw_adjust, warn_singular, log_scale, levels, thresh, gridsize, cut, clip, legend, cbar, cbar_ax, cbar_kws, ax, **kwargs)\u001b[0m\n\u001b[1;32m   1677\u001b[0m         \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1678\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1679\u001b[0;31m     \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_attach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallowed_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"numeric\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"datetime\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlog_scale\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlog_scale\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1680\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1681\u001b[0m     \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_between\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mfill\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/_base.py\u001b[0m in \u001b[0;36m_attach\u001b[0;34m(self, obj, allowed_types, log_scale)\u001b[0m\n\u001b[1;32m   1082\u001b[0m                     \u001b[0;34mf\"{allowed_types} is required\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1083\u001b[0m                 )\n\u001b[0;32m-> 1084\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1085\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1086\u001b[0m         \u001b[0;31m# -- Get axis objects for each row in plot_data for type conversions and scaling\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: The x variable is categorical, but one of ['numeric', 'datetime'] is required"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# statistical summary before standardization\n","penguin_data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"1aCCsRQP8FVZ","executionInfo":{"status":"ok","timestamp":1732162914658,"user_tz":-330,"elapsed":481,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"35f9e341-3688-47e7-efad-7bb9f7f0d970"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g\n","count      333.000000     333.000000         333.000000   333.000000\n","mean        43.992793      17.164865         200.966967  4207.057057\n","std          5.468668       1.969235          14.015765   805.215802\n","min         32.100000      13.100000         172.000000  2700.000000\n","25%         39.500000      15.600000         190.000000  3550.000000\n","50%         44.500000      17.300000         197.000000  4050.000000\n","75%         48.600000      18.700000         213.000000  4775.000000\n","max         59.600000      21.500000         231.000000  6300.000000"],"text/html":["\n","  <div id=\"df-67146ff9-5fd2-4283-8201-da7fef7a49ab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bill_length_mm</th>\n","      <th>bill_depth_mm</th>\n","      <th>flipper_length_mm</th>\n","      <th>body_mass_g</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>333.000000</td>\n","      <td>333.000000</td>\n","      <td>333.000000</td>\n","      <td>333.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>43.992793</td>\n","      <td>17.164865</td>\n","      <td>200.966967</td>\n","      <td>4207.057057</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.468668</td>\n","      <td>1.969235</td>\n","      <td>14.015765</td>\n","      <td>805.215802</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.100000</td>\n","      <td>13.100000</td>\n","      <td>172.000000</td>\n","      <td>2700.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>39.500000</td>\n","      <td>15.600000</td>\n","      <td>190.000000</td>\n","      <td>3550.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>44.500000</td>\n","      <td>17.300000</td>\n","      <td>197.000000</td>\n","      <td>4050.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>48.600000</td>\n","      <td>18.700000</td>\n","      <td>213.000000</td>\n","      <td>4775.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>59.600000</td>\n","      <td>21.500000</td>\n","      <td>231.000000</td>\n","      <td>6300.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67146ff9-5fd2-4283-8201-da7fef7a49ab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-67146ff9-5fd2-4283-8201-da7fef7a49ab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-67146ff9-5fd2-4283-8201-da7fef7a49ab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-294774ae-32c4-469b-a098-fd4485af9fd1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-294774ae-32c4-469b-a098-fd4485af9fd1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-294774ae-32c4-469b-a098-fd4485af9fd1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"penguin_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"bill_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.09816384915695,\n        \"min\": 5.468668342647562,\n        \"max\": 333.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          43.99279279279279,\n          44.5,\n          333.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_depth_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.56529060018214,\n        \"min\": 1.9692354633199,\n        \"max\": 333.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          17.164864864864864,\n          17.3,\n          333.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flipper_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.83322997856418,\n        \"min\": 14.015765288287882,\n        \"max\": 333.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          200.96696696696696,\n          197.0,\n          333.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body_mass_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1999.914028923884,\n        \"min\": 333.0,\n        \"max\": 6300.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4207.057057057057,\n          4050.0,\n          333.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# importing stardardisation library\n","from sklearn.preprocessing import StandardScaler\n","scale=StandardScaler()"],"metadata":{"id":"lS3emkWl9ISi","executionInfo":{"status":"ok","timestamp":1732163035964,"user_tz":-330,"elapsed":1386,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# extracting the numerical cols\n","num_cols=penguin_data.select_dtypes(include=['float64','int64'])\n","# before standardization\n","num_cols.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wRxDt3a9-B8d","executionInfo":{"status":"ok","timestamp":1732163274897,"user_tz":-330,"elapsed":17,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"e85f1876-72f4-450e-b3df-6373287e8cdc"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g\n","0            39.1           18.7              181.0       3750.0\n","1            39.5           17.4              186.0       3800.0\n","2            40.3           18.0              195.0       3250.0\n","4            36.7           19.3              193.0       3450.0\n","5            39.3           20.6              190.0       3650.0"],"text/html":["\n","  <div id=\"df-49ac3c1a-2a74-4136-97db-8f058eca86a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bill_length_mm</th>\n","      <th>bill_depth_mm</th>\n","      <th>flipper_length_mm</th>\n","      <th>body_mass_g</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39.1</td>\n","      <td>18.7</td>\n","      <td>181.0</td>\n","      <td>3750.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39.5</td>\n","      <td>17.4</td>\n","      <td>186.0</td>\n","      <td>3800.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40.3</td>\n","      <td>18.0</td>\n","      <td>195.0</td>\n","      <td>3250.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36.7</td>\n","      <td>19.3</td>\n","      <td>193.0</td>\n","      <td>3450.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>39.3</td>\n","      <td>20.6</td>\n","      <td>190.0</td>\n","      <td>3650.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49ac3c1a-2a74-4136-97db-8f058eca86a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-49ac3c1a-2a74-4136-97db-8f058eca86a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-49ac3c1a-2a74-4136-97db-8f058eca86a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bcd978aa-a981-41b2-8752-2a01548d62c2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bcd978aa-a981-41b2-8752-2a01548d62c2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bcd978aa-a981-41b2-8752-2a01548d62c2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"num_cols","summary":"{\n  \"name\": \"num_cols\",\n  \"rows\": 333,\n  \"fields\": [\n    {\n      \"column\": \"bill_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.468668342647562,\n        \"min\": 32.1,\n        \"max\": 59.6,\n        \"num_unique_values\": 163,\n        \"samples\": [\n          59.6,\n          48.1,\n          46.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_depth_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9692354633199,\n        \"min\": 13.1,\n        \"max\": 21.5,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          19.5,\n          18.7,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flipper_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.015765288287882,\n        \"min\": 172.0,\n        \"max\": 231.0,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          188.0,\n          231.0,\n          224.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body_mass_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 805.2158019428966,\n        \"min\": 2700.0,\n        \"max\": 6300.0,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          4725.0,\n          3100.0,\n          3575.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["import pandas as pd\n","# applying standardisation\n","scaled_data=scale.fit_transform(num_cols)\n","# converting the data into dataframe\n","scaled_df=pd.DataFrame(scaled_data,columns=scale.get_feature_names_out())"],"metadata":{"id":"p4kgT5xe9lr1","executionInfo":{"status":"ok","timestamp":1732163602285,"user_tz":-330,"elapsed":464,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["scaled_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"6eGxcFvQ-qhy","executionInfo":{"status":"ok","timestamp":1732163610439,"user_tz":-330,"elapsed":465,"user":{"displayName":"Asad Wani","userId":"16560195759589895912"}},"outputId":"89147c1d-2422-4ffa-d013-d1eefbbdaee0"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g\n","0         -0.896042       0.780732          -1.426752    -0.568475\n","1         -0.822788       0.119584          -1.069474    -0.506286\n","2         -0.676280       0.424729          -0.426373    -1.190361\n","3         -1.335566       1.085877          -0.569284    -0.941606\n","4         -0.859415       1.747026          -0.783651    -0.692852\n","..              ...            ...                ...          ...\n","328        0.587352      -1.762145           0.931283     0.892957\n","329        0.514098      -1.457000           1.002739     0.799674\n","330        1.173384      -0.744994           1.502928     1.919069\n","331        0.221082      -1.202712           0.788372     1.234995\n","332        1.081817      -0.541564           0.859828     1.483749\n","\n","[333 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-d1f9464a-4a09-42d9-a0d8-33e931e3fd68\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bill_length_mm</th>\n","      <th>bill_depth_mm</th>\n","      <th>flipper_length_mm</th>\n","      <th>body_mass_g</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.896042</td>\n","      <td>0.780732</td>\n","      <td>-1.426752</td>\n","      <td>-0.568475</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.822788</td>\n","      <td>0.119584</td>\n","      <td>-1.069474</td>\n","      <td>-0.506286</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.676280</td>\n","      <td>0.424729</td>\n","      <td>-0.426373</td>\n","      <td>-1.190361</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-1.335566</td>\n","      <td>1.085877</td>\n","      <td>-0.569284</td>\n","      <td>-0.941606</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.859415</td>\n","      <td>1.747026</td>\n","      <td>-0.783651</td>\n","      <td>-0.692852</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>328</th>\n","      <td>0.587352</td>\n","      <td>-1.762145</td>\n","      <td>0.931283</td>\n","      <td>0.892957</td>\n","    </tr>\n","    <tr>\n","      <th>329</th>\n","      <td>0.514098</td>\n","      <td>-1.457000</td>\n","      <td>1.002739</td>\n","      <td>0.799674</td>\n","    </tr>\n","    <tr>\n","      <th>330</th>\n","      <td>1.173384</td>\n","      <td>-0.744994</td>\n","      <td>1.502928</td>\n","      <td>1.919069</td>\n","    </tr>\n","    <tr>\n","      <th>331</th>\n","      <td>0.221082</td>\n","      <td>-1.202712</td>\n","      <td>0.788372</td>\n","      <td>1.234995</td>\n","    </tr>\n","    <tr>\n","      <th>332</th>\n","      <td>1.081817</td>\n","      <td>-0.541564</td>\n","      <td>0.859828</td>\n","      <td>1.483749</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>333 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1f9464a-4a09-42d9-a0d8-33e931e3fd68')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d1f9464a-4a09-42d9-a0d8-33e931e3fd68 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d1f9464a-4a09-42d9-a0d8-33e931e3fd68');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ccadc07d-db5d-4e29-b309-fb747ebad56e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccadc07d-db5d-4e29-b309-fb747ebad56e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ccadc07d-db5d-4e29-b309-fb747ebad56e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5d76fc2f-515b-4f6c-92a3-c9b75934be30\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('scaled_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5d76fc2f-515b-4f6c-92a3-c9b75934be30 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('scaled_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"scaled_df","summary":"{\n  \"name\": \"scaled_df\",\n  \"rows\": 333,\n  \"fields\": [\n    {\n      \"column\": \"bill_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0015048917468006,\n        \"min\": -2.1779872927431403,\n        \"max\": 2.8582267903554412,\n        \"num_unique_values\": 163,\n        \"samples\": [\n          2.8582267903554412,\n          0.7521736283323981,\n          0.42253052471139924\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_depth_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0015048917468008,\n        \"min\": -2.067290642627703,\n        \"max\": 2.204743477908801,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          1.187592496828681,\n          0.7807321043966328,\n          -0.08384622952146882\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flipper_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0015048917468001,\n        \"min\": -2.0698519502697263,\n        \"max\": 2.1460283386530725,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          -0.9265623803923573,\n          2.1460283386530725,\n          1.6458391518317235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body_mass_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0015048917468012,\n        \"min\": -1.874435413639854,\n        \"max\": 2.603143890677087,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          0.6442029450384253,\n          -1.376926602049083,\n          -0.786134888285042\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":[],"metadata":{"id":"bseJe82d_Gda"},"execution_count":null,"outputs":[]}]}